<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="access_beta" xml:space="preserve">
    <value>Zugriff auf die Beta-Versionen von EDDI</value>
  </data>
  <data name="EDDI_status_label" xml:space="preserve">
    <value>EDDI Status: </value>
  </data>
  <data name="paragraph_0" xml:space="preserve">
    <value>hat eine Reihe von Funktionen, die separat konfiguriert werden können. Es gibt drei verschiedene Arten von Gegenständen.</value>
  </data>
  <data name="paragraph_1" xml:space="preserve">
    <value>Die erste Gruppe erhält und verwaltet die von EDDI verwendeten Basisinformationen. Dies sind die Registerkarten 'Commander Details', 'Frontier API' und 'Text-to-Speech'. Sie sollten diese durchgehen und so konfigurieren, dass EDDI vollen Zugriff auf Ihr ELITE hat: Gefährliche Informationen.</value>
  </data>
  <data name="paragraph_2" xml:space="preserve">
    <value>Die zweite Gruppe erhält Ereignisinformationen. Dies sind die Registerkarten, die mit "Monitor" enden. Sie erhalten Ereignisse von verschiedenen Orten und benötigen nur eine minimale Konfiguration, müssen aber abgeschlossen sein, bevor sie funktionieren.</value>
  </data>
  <data name="paragraph_3" xml:space="preserve">
    <value>Die dritte Gruppe reagiert auf Ereignisse. Dies sind die Registerkarten, die mit "Responder" enden. Diese haben unterschiedliche Ausbaustufen, funktionieren aber sofort.</value>
  </data>
  <data name="paragraph_4" xml:space="preserve">
    <value>Mehr über die Funktionsweise von EDDI erfahren Sie auf der Seite</value>
  </data>
  <data name="report_issue" xml:space="preserve">
    <value>Ein Problem melden</value>
  </data>
  <data name="troubleshoot_common_issues" xml:space="preserve">
    <value>Fehlerbehebung bei bekannten Problemen</value>
    <comment>A hyperlink to the troubleshooting URL (in english)</comment>
  </data>
  
  
  <data name="version_hyperlink" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="wiki_hyperlink" xml:space="preserve">
    <value>Projekt Wiki</value>
  </data>
  <data name="choose_lang_label" xml:space="preserve">
    <value>Wählen Sie die Sprache von EDDI (erfordert einen Neustart von EDDI):</value>
  </data>
  <data name="label_code" xml:space="preserve">
    <value>Code:</value>
  </data>
  <data name="label_email" xml:space="preserve">
    <value>E-Mail:</value>
  </data>
  <data name="label_password" xml:space="preserve">
    <value>Passwort:</value>
  </data>
  <data name="tab_frontier_desc" xml:space="preserve">
    <value>Frontier hat eine API, die es EDDI ermöglicht, Informationen über Ihre Schiffe, den Markt der aktuellen Station und verschiedene andere Elemente zu erhalten. Diese Daten sind anderweitig nicht verfügbar. Wenn Sie möchten, dass EDDI diese Informationen erhält und nutzt, müssen Sie unten Ihre Frontier-E-Mail-Adresse und Ihr Passwort eingeben.</value>
  </data>
  <data name="tab_frontier_header" xml:space="preserve">
    <value>Frontier API</value>
  </data>
  <data name="tab_frontier_reset_desc" xml:space="preserve">
    <value>Wenn Sie Probleme mit Ihrer Verbindung haben, können Sie diese zurücksetzen und sich erneut anmelden, wodurch das Problem behoben werden könnte</value>
  </data>
  <data name="tab_tts_desc" xml:space="preserve">
    <value>EDDI verwendet eine eigene Text-to-Speech-Engine, die die Stimme abhängig von Merkmalen wie Schiffsbeschädigung und Größe des Cockpits verarbeitet. Hier können Sie die Parameter der Stimme einstellen.</value>
  </data>
  <data name="tab_tts_distort_label" xml:space="preserve">
    <value>Verzerren Sie die Stimme bei Schiffsschäden:</value>
  </data>
  <data name="tab_tts_header" xml:space="preserve">
    <value>Text-zu-Sprache</value>
  </data>
  <data name="tab_tts_level_label" xml:space="preserve">
    <value>Level der Sprachverzerrung:</value>
  </data>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
</root>
